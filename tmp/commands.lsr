(defmacro def-command [name arg-map & body]
  `(do (defn ~name 
         ~(apply str (arg-map :doc)) ;; generate docstring from str/symbol vector
         [~'buffer]
         (let [orig-text# (buffer-string ~'buffer)]
           (let [~'parser (~'buffer :parser)
                 {~'tf :textfield ~'tokens :tokens} ~'parser]
             ~@body)
           (when-not (= orig-text# (buffer-string ~'buffer)) ;; if textfield content has changed
             (dispatch-change-event ~'buffer))
           (assoc ~'buffer :undo-depth 0))) ;; return buffer and set undo depth to 0
       (set-key-handler! ~(arg-map :key) ~(arg-map :modifiers) ~name)
       (set-command! (quote ~name) 
                     (assoc (dissoc ~arg-map :key :modifiers) 
                       :fn ~name))))

(defn set-command! [name command]
  (prn 'set-command! name command)
  (def *commands*
    (assoc *commands* name command)))

(def-command hello
  {:doc ["The " hello " command prints hello-world."]
   :key "h"
   :modifiers [:ctrl]}
  (println "hello-world"))