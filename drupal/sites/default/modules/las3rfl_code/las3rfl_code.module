<?php

include_once('las3rfl_code.features.inc');

/*
 * Implementation of hook_menu_alter()
 */
function las3rfl_code_menu_alter(&$items) {
  // The add code menu item should be shown to anonymous users too,
  // las3rfl_code_add_node does more checks and redirects to the
  // login page if neccesary.
  $items['node/add/code']['access callback'] = 'user_access';
  $items['node/add/code']['access arguments'] = array('access content');

  $items['node/add/code']['page callback'] = 'las3rfl_code_add_node';
  $items['node/%node/edit']['page callback'] = 'las3rfl_code_edit_node';

  // Show delete item in tab when viewing a node.
  $items['node/%node/delete']['type'] = MENU_LOCAL_TASK;
  $items['node/%node/delete']['weight'] = 95;
}

/*
 * Implementation of hook_menu()
 */
function las3rfl_code_menu() {
  $items = array();

  // las3r editor callback.
  $items['node/%node/fork'] = array(
    'title' => t('Fork'),
    'title callback' => 'check_plain',
    'page callback' => 'las3rfl_code_fork_node',
    'page arguments' => array(1),
    'access callback' => 'las3rfl_code_is_forkable',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    'weight' => 90,
  );

  $items['node/%node/raw'] = array(
    'page callback' => 'las3rfl_code_raw_node',
    'page arguments' => array(1),
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
  );

  return $items;
}

/*
 * Fork menu item access callback, checks if node type is code.
 */
function las3rfl_code_is_forkable($node) {
  if($node->type == 'code') {
    return $node;
  } else {
    return FALSE;
  }
}

/*
 * Returns HTML with a code editor. $fork should be true if we're forking an 
 * existing code. $node should be null on add, the node to edit if $fork is
 * false, or the node to be forked if $fork is true.
 *
 * Since this is a one-site single use module, there are no theming hooks.
 */
function las3rfl_code_editor($node = NULL, $fork = FALSE) {
  ob_start();                      // Start output buffering
  include "editor.tpl.php";        // Include the template file
  $contents = ob_get_contents();   // Get the contents of the buffer
  ob_end_clean();                  // End buffering and discard

  return $contents;
}

/*
 * Wrapper for las3rfl_code_editor, checks permissions and redirects to login
 * page if neccesary. Used by add and fork functions.
 */
function las3rfl_code_check_perms_and_edit($node = NULL, $fork = FALSE) {
  if(user_is_logged_in()) {
    if(node_access('create', 'code')) {
      return las3rfl_code_editor($node, $fork);
    } else { // logged in, but no create code permission - should never happen
      drupal_set_title('403 Access Denied');
      return ('This is probably a bug, but you are not authorized to access this page.');
    }
  } else { // not logged in
    drupal_goto('user', drupal_get_destination());
  }
}

function las3rfl_code_add_node() {
  return las3rfl_code_check_perms_and_edit();
}

function las3rfl_code_fork_node($node) {
  return las3rfl_code_check_perms_and_edit($node, TRUE);
}

function las3rfl_code_edit_node($node) {
  drupal_set_title(check_plain($node->title));
  if($node->type == 'code') {
    return las3rfl_code_editor($node);
  } else {
    return drupal_get_form($node->type . '_node_form', $node);
  }
}

/*
 * Menu callback, prints raw code as plain text.
 */
function las3rfl_code_raw_node($node) {
  if ($node->type == 'code') {
    drupal_set_header('Content-Type: text/plain');
    print($node->body);
    return NULL;
  }
}

/*
 * Implementation of hook_boot, just to make sure noone mistakes the untrusted swf domain
 * for the real site.
 */


// substr_compare(string1,string2,startpos,length,case)

// Parameter 	Description
// string1 	Required. Specifies the first string to compare
// string2 	Required. Specifies the second string to compare
// startpos 	Required. Specifies where to start comparing in string1
// length 	Optional. Specifies how much of string1 to compare
// case 	Optional. Specifies whether or not to perform a case-sensitive compare. Default is FALSE (case-sensitive)

function las3rfl_code_boot() {
  // If the request is not for the usual site domain (defined in settings.php)
  $site_domain = variable_get('site_domain', NULL);
  if ($_SERVER['HTTP_HOST'] != $site_domain) {
    // And it's not after raw code or files (file request bypass drupal altogether)
    if (substr($_GET['q'], -4) != '/raw') {
      header('HTTP/1.1 400 Bad Request');
      exit('Las3rfl error: Wrong domain. The site domain is '. $site_domain .'.');
    }
  }
}