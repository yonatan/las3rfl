<?php

include_once('las3rfl_code.features.inc');

/*
 * Implementation of hook_menu_alter()
 */
function las3rfl_code_menu_alter(&$items) {
  // The add code menu item should be shown to anonymous users too,
  // las3rfl_code_add_node does more checks and redirects to the
  // login page if neccesary.
  $items['node/add/code']['access callback'] = 'user_access';
  $items['node/add/code']['access arguments'] = array('access content');

  $items['node/add/code']['page callback'] = 'las3rfl_code_add_node';
  $items['node/%node/edit']['page callback'] = 'las3rfl_code_edit_node';

  // Show delete item in tab when viewing a node.
  $items['node/%node/delete']['type'] = MENU_LOCAL_TASK;
  $items['node/%node/delete']['weight'] = 95;
}

/*
 * Implementation of hook_menu()
 */
function las3rfl_code_menu() {
  $items = array();

  // las3r editor callback.
  $items['node/%node/fork'] = array(
    'title' => t('Fork'),
    'title callback' => 'check_plain',
    'page callback' => 'las3rfl_code_fork_node',
    'page arguments' => array(1),
    'access callback' => 'las3rfl_code_is_forkable',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    'weight' => 90,
  );

  $items['node/%node/raw'] = array(
    'page callback' => 'las3rfl_code_raw_node',
    'page arguments' => array(1),
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
  );

  $items['node/%node/diff'] = array(
    'page callback' => 'las3rfl_code_diff',
    'page arguments' => array(1),
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
  );

  $items['libraries'] = array(
    'page callback' => 'las3rfl_code_list_libs',
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
  );

  return $items;
}

/*
 * Show a diff of between parent and forked code.
 */
function las3rfl_code_diff($node) {
  if($node->type == 'code' && $node->field_forked_from[0]['nid']) {
    drupal_add_js(drupal_get_path('module', 'las3rfl_code') .'/diff/diffview.js', 'module');
    drupal_add_js(drupal_get_path('module', 'las3rfl_code') .'/diff/difflib.js', 'module');
    drupal_add_js(drupal_get_path('module', 'las3rfl_code') .'/diff/diff.js', 'module');
    drupal_add_css(drupal_get_path('module', 'las3rfl_code') .'/diff/diffview.css', 'module');
    $parent = node_load($node->field_forked_from[0]['nid']);
    $output .= '<h1 id="diff-left-title">'. check_plain($parent->title) .'</h1>';
    $output .= '<pre id="diff-left">'. check_plain($parent->body) .'</pre>';
    $output .= '<h1 id="diff-right-title">'. check_plain($node->title) .'</h1>';
    $output .= '<pre id="diff-right">'. check_plain($node->body) .'</pre>';
    return $output;
  } else {
    drupal_set_title('Sorry');
    return('I can\'t show a diff for this one.');
  }
}

/*
 * Fork menu item access callback, checks if node type is code.
 */
function las3rfl_code_is_forkable($node) {
  if($node->type == 'code') {
    return $node;
  } else {
    return FALSE;
  }
}

/*
 * Returns HTML with a code editor. $fork should be true if we're forking an 
 * existing code. $node should be null on add, the node to edit if $fork is
 * false, or the node to be forked if $fork is true.
 *
 * Since this is a one-site single use module, there are no theming hooks.
 */
function las3rfl_code_editor($node = NULL, $fork = FALSE) {
  if(!user_is_logged_in()) {
    drupal_set_message('You are not logged in. Code posted by anonymous users can be changed by others. If this bothers you '. l('log in', 'user') .'.', 'warning');
  }

  ob_start();                      // Start output buffering
  include "editor.tpl.php";        // Include the template file
  $contents = ob_get_contents();   // Get the contents of the buffer
  ob_end_clean();                  // End buffering and discard

  return $contents;
}

/*
 * Shows an access denied message to logged in users, 
 * redirects anonymous ones to login page.
 */
function las3rfl_code_deny_access_or_redirect_to_login() {
  if(user_is_logged_in()) {
    drupal_set_title('403 Access Denied');
    return ('You are not authorized to access this page.');
  } else {
    drupal_goto('user', drupal_get_destination());
  }
}

function las3rfl_code_add_node() {
  if(node_access('create', 'code')) {
    return las3rfl_code_editor(NULL, FALSE);
  } else {
    return las3rfl_code_deny_access_or_redirect_to_login();
  }
}

function las3rfl_code_fork_node($node) {
  if(node_access('create', 'code')) {
    return las3rfl_code_editor($node, TRUE);
  } else {
    return las3rfl_code_deny_access_or_redirect_to_login();
  }
}

function las3rfl_code_edit_node($node) {
  drupal_set_title(check_plain($node->title));
  if($node->type == 'code') {
    return las3rfl_code_editor($node, FALSE);
  } else {
    return drupal_get_form($node->type . '_node_form', $node);
  }
}

/*
 * Menu callback, prints raw code as plain text.
 */
function las3rfl_code_raw_node($node) {
  if ($node->type == 'code') {
    drupal_set_header('Content-Type: text/plain');
    print($node->body);
    return NULL;
  }
}

/*
 * Implementation of hook_boot, just to make sure noone mistakes the untrusted swf domain
 * for the real site.
 */

function las3rfl_code_boot() {
  // If it's drush don't kill it.
  if (php_sapi_name() != 'cli') {
    // If the request is not for the usual site domain (defined in settings.php)
    $site_domain = variable_get('site_domain', NULL);
    if ($_SERVER['HTTP_HOST'] != $site_domain) {
      // And it's not after raw code or files (file request bypass drupal altogether)
      if (substr($_GET['q'], -4) != '/raw') {
	header('HTTP/1.1 400 Bad Request');
	exit('Las3rfl error: Wrong domain. The site domain is '. $site_domain .'.');
      }
    }
  }
}

/*
 * Implementation of hook_link_alter()
 */
function las3rfl_code_link_alter(&$links, $node, $comment = NULL) {
  if ($node->type == 'code' && $comment) {
    unset($links['comment_reply']);
  }
}

/*
 * Library list callback
 */
function las3rfl_code_list_libs() {
  drupal_set_title('Available AS3 libraries');
  $files = file_scan_directory('./lib', '.*library.swf');
  $output = '<ul>';
  foreach ($files as $path => $whatever) {
    $name = substr($path, 6, -12);
    $output .= '<li>'. $name .'</li>';
  }
  $output .= '</ul>';
  return $output;
}